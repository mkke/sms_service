diff --git a/gsm.go b/gsm.go
index 98d0ec4..7b6ebc8 100644
--- a/gsm.go
+++ b/gsm.go
@@ -127,7 +127,7 @@ func lineChannel(r io.Reader) chan string {
 		buffer := bufio.NewReader(r)
 		for {
 			line, _ := buffer.ReadString(10)
-			line = strings.TrimRight(line, "\r\n")
+			line = strings.TrimSuffix(strings.TrimSuffix(line, "\r\n"), "\r");
 			if line == "" {
 				continue
 			}
@@ -162,6 +162,10 @@ func parsePacket(status string, header string, body string) Packet {
 		return ServiceStatus{args[0].(string)}
 	case "+ZDONR":
 		return NetworkStatus{args[0].(string)}
+	case "^RSSI":
+		return RSSIStatus{args[0].(int)}
+	case "^HCSQ":
+		return SignalStatus{args[0].(string), args[1].(int), args[2].(int), args[3].(int), args[4].(int)}
 	case "+CMTI":
 		return MessageNotification{args[0].(string), args[1].(int)}
 	case "+CSCA":
@@ -257,7 +261,7 @@ func (self *Modem) listen() {
 			if len(m) > 0 {
 				last = m[1]
 			}
-			echo = strings.TrimRight(line, "\r\n")
+			echo = strings.TrimSuffix(strings.TrimSuffix(line, "\r\n"), "\r");
 			self.port.Write([]byte(line))
 		}
 	}
@@ -313,11 +317,17 @@ func (self *Modem) init() error {
 	// often a benign error.
 	self.send("+CMGF", 1)
 
+	log.Println("Set SMS routing mode");
+	r, err := self.send("+CNMI", 0, 1, 0, 1, 1);
+	if err != nil {
+		return err
+	}
+
 	log.Println("Set SMS text mode")
 	// get SMSC
 	// the modem complains if SMSC hasn't been set, but stores it correctly, so
 	// query for stored value, then send a set from the query response.
-	r, err := self.send("+CSCA?")
+	r, err = self.send("+CSCA?")
 	if err != nil {
 		return err
 	}
diff --git a/packets.go b/packets.go
index 14b9ef8..9a54f72 100644
--- a/packets.go
+++ b/packets.go
@@ -14,6 +14,20 @@ type NetworkStatus struct {
 	Network string
 }
 
+// Ë†HCSQ
+type SignalStatus struct {
+	Signal string
+	RSSI int
+	RSSP int
+	SINR int
+	RSRQ int
+}
+
+// ^RSSI
+type RSSIStatus struct {
+	RSSI int
+}
+
 // +CMTI
 type MessageNotification struct {
 	Storage string
